public class AVLTree extends BTreePrinter{
    Node root;

    public AVLTree(Node root){
        this.root = root;
        root.parent = null; // Clear parent of the root (Important for spliting)
    }
    
    public void singleRotateFromLeft(Node y) {
        if (y == null || y.left == null) {
            return;
        }
        Node x = y.left;
        Node w = y.parent;
        
        y.left = x.right;
        if (y.left != null) {
            y.left.parent = y;
        }
        
        x.right = y;
        y.parent = x;
        
        if (w != null) {
            if (w.left == y) {
                w.left = x;  // x becomes the left child of w
            } else {
                w.right = x;  // x becomes the right child of w
            }
            x.parent = w;  // update x's parent to w
        } else { //y is root
            root = x;
            x.parent = null;
        }
    }

    public void singleRotateFromRight(Node y) {
       if (y == null || y.right == null) {
            return;
        }
        Node x = y.right;
        Node w = y.parent;
        
        y.right = x.left;
        if (y.right != null) {
            y.right.parent = y;
        }
        
        x.left = y;
        y.parent = x;
        
        if (w != null) {
            if (w.right == y) {
                w.right = x;  // x becomes the right child of w
            } else {
                w.left = x;  // x becomes the left child of w
            }
            x.parent = w;  // update x's parent to w
        } else { // y is the root
            root = x;
            x.parent = null;
        }
    }
    
    public void doubleRotateFromLeft(Node y) {
        if (y == null || y.left == null || y.left.right == null) {
            return;
        }
        
        Node x = y.left;
        Node z = x.right;
        Node w = y.parent;
        
        // Step 1: Right rotation on y.left (x)
        x.right = z.left;
        if (x.right != null) {
            x.right.parent = x; // Update parent reference of the moved subtree
        }
        
        z.left = x;
        x.parent = z;
        
        // Step 2: Left rotation on y
        y.left = z.right;
        if (y.left != null) {
            y.left.parent = y; // Update parent reference
        }
        z.right = y;
        y.parent = z;

        // Update parent references
        if (w != null) {
            if (w.left == y) {
                w.left = z;
            } else {
                w.right = z;
            }
            z.parent = w;
        } else {
            root = z;
            z.parent = null;
        }
    }

    public void doubleRotateFromRight(Node y) {
        if (y == null || y.right == null || y.right.left == null) {
            return;
        }

        Node x = y.right;  // Right child of y
        Node z = x.left;   // Left child of x (this will become the new root of this subtree)
        Node w = y.parent; // Parent of y

        // Step 1: Left rotation on y.right (x)
        x.left = z.right;
        if (x.left != null) {
            x.left.parent = x; // Update parent reference of the moved subtree
        }

        z.right = x;
        x.parent = z;

        // Step 2: Right rotation on y
        y.right = z.left;
        if (y.right != null) {
            y.right.parent = y; // Update parent reference
        }

        z.left = y;
        y.parent = z;

        // Update parent references
        if (w != null) {
            if (w.right == y) {
                w.right = z;
            } else {
                w.left = z;
            }
            z.parent = w;
        } else {
            root = z;
            z.parent = null;
        }
    }
    
    public static void rebalance(AVLTree tree, Node node) {
        if (node == null) return;
        int balanceFactor = height(node.left) - height(node.right); // Calculate balanceFactor
        if (Math.abs(balanceFactor) > 1){                          // Use balanceFactor to check if unbalanced?
            if (balanceFactor > 0){ 
                balanceFactor = height(node.left.left) - height(node.left.right);// Use balanceFactor to check if left heavy?
                if (balanceFactor > 0){ //Outer
                    System.out.println("Perform SingleRotationFromLeft(Node " + node.key + ")");
                    tree.singleRotateFromLeft(node);
                }else{ //Inner
                    System.out.println("Perform DoubleRotationFromLeft(Node " + node.key + ")");
                    tree.doubleRotateFromLeft(node);
                }
            }else{ //right heavy
                balanceFactor = height(node.right.right) - height(node.right.left);
                if (balanceFactor > 0){ //Outer
                    System.out.println("Perform SingleRotationFromRight(Node " + node.key + ")");
                    tree.singleRotateFromRight(node);
                }else{ //Inner
                    System.out.println("Perform DoubleRotationFromRight(Node " + node.key + ")");
                    tree.doubleRotateFromRight(node);   
                }
            }
        }
    }
    
    
    public static Node findKey(Node node, int search_key) {
        if (node == null) {
            return null;
        }
        if (node.key == search_key) {
            return node;
        }
        if (search_key < node.key) {
            return findKey(node.left, search_key);
        } else {
            return findKey(node.right, search_key);
        }
    }

    public static Node findMin(Node node) {
        // Pls copy the code from the previous problem
        if (node.left==null){
            return node;
        }else{
            return findMin(node.left);
        }
    }

    public static Node findMax(Node node) {
        // Pls copy the code from the previous problem
        if (node.right==null){
            return node;
        }else{
            return findMax(node.right);
        }
    }

    public void insertKey(int key) {
        if (root == null) {
            root = new Node(key);
        } else {
            insertKey(this, root, key);
        }
    }

    public static void insertKey(AVLTree tree, Node node, int key) {
        if (key == node.key) {
            System.out.println("Duplicated key:" + key);
            return;
        }else if (key < node.key) {//Go left
            if (node.left == null) {
                node.left = new Node(key);
                node.left.parent = node;
                rebalance(tree, node);
            }else {
                insertKey(tree, node.left, key);
                rebalance(tree, node);
            }
        }else{  // Go right
            if (node.right == null) {
                node.right = new Node(key);
                node.right.parent = node;
                rebalance(tree, node);
            }else {
                insertKey(tree, node.right, key);
                rebalance(tree, node);
            }
        }
    }
    
    public void deleteKey(int key) {
        if (root == null) {
            System.out.println("Empty Tree!!!"); 
        } else {
            Node delete = findKey(root, key); 
            if (delete == null) {
                return;
            } else {
                if (delete != root) {
                    deleteKey(this, delete);
                } else {
                    if (delete.left == null && delete.right == null) {
                        delete = null;
                    } 
                    else if (delete.left == null) {
                        delete = delete.right; 
                    } 
                    else if (delete.right == null) {
                        delete = delete.left; 
                    } 
                    else {
                        Node deleteLastCase = findMin(delete.right);
                        delete.key = deleteLastCase.key; 
                        deleteKey(this, deleteLastCase); 
                    }
                    root = delete; 
                }
            }
        }
    }
    
    public static void deleteKey(AVLTree tree, Node node){
        // Pls copy the code from the previous homework
        // Add code segments to enable the rebalancing feature
        if (node.left == null && node.right == null) {
            if (node.key < node.parent.key) {
                node.parent.left = null; // 1. 
            } else {
                node.parent.right = null; // 2.
            }
        } 
        else if (node.left == null) {
            if (node.key < node.parent.key) {
                node.parent.left = node.right; // 3.
            } else {
                node.parent.right = node.right; // 4.
            }
            node.right.parent = node.parent;
        } 
        else if (node.right == null) {
            if (node.key < node.parent.key) {
                node.parent.left = node.left; // 5. 
            } else {
                node.parent.right = node.left; // 6. 
            }
            node.left.parent = node.parent; 
        } 
        // 7.
        else {
            Node delete = findMin(node.right); 
            node.key = delete.key; 
            deleteKey(tree, delete); 
        }  
        Node current = node.parent; // Start from the parent of the deleted node
        while (current != null) {
            rebalance(tree, current); // Rebalance the current node
            current = current.parent; // Move up to the parent
        }
    }
    
    public static boolean isMergeable(Node r1, Node r2) {
        if(r1 == null && r2 != null) return true;
        if(r1 != null && r2 == null) return true;
       if (findMax(r1).key < findMin(r2).key){
            return true;
        }else return false; 
    }

    public static Node mergeWithRoot(Node r1, Node r2, Node t) {
        if(r1 == null && r2 == null) return t;
        if (isMergeable(r1, r2)) {
            if (Math.abs(height(r1) - height(r2)) <= 1) {
                t.left = r1;
                t.right = r2;
                return t; 
            } else if (height(r1) > height(r2)) {
                Node r = mergeWithRoot(r1.right, r2, t);
                r1.right = r;
                r.parent = r1;
                AVLTree tree = new AVLTree(r1);
                rebalance(tree, r1);
                return tree.root;
            } else {
                Node r = mergeWithRoot(r1, r2.left, t);
                r2.left = r; 
                r.parent = r2;
                AVLTree tree = new AVLTree(r2);
                rebalance(tree, r2);
                return tree.root;
            }
        } else {
            System.out.println("All nodes in T1 must be smaller than all nodes from T2");
            return null;
        }
    }

// Fix this function
public Node[] split(int key) { // เมธอดสำหรับแยกต้นไม้ที่รากโดยใช้ค่า key
    return split(this.root, key); // เรียกใช้ฟังก์ชัน static split โดยใช้รากของต้นไม้ปัจจุบันเป็นพารามิเตอร์ (มีปัญหาอยู่)
}

// Fix this function
public static Node[] split(Node r, int key) { // ฟังก์ชัน static สำหรับแยกต้นไม้ที่ราก r โดยใช้ค่า key
    Node[] arr = new Node[2]; // สร้างอาเรย์เพื่อเก็บผลลัพธ์ที่แยกได้
    // ทำอะไรบางอย่าง
    if (r == null) { // หาก r เป็น null
        arr[0] = null; // กำหนดสมาชิกแรกในอาเรย์เป็น null
        arr[1] = null; // กำหนดสมาชิกที่สองในอาเรย์เป็น null
        return arr; // คืนค่าอาเรย์
    }else if(key < r.key){ // หาก key น้อยกว่า key ของ r
        arr = split(r.left, key); // เรียกใช้ฟังก์ชัน split กับลูกซ้ายของ r
        if(arr[1] != null) arr[1].parent = null; // หากสมาชิกที่สองในอาเรย์ไม่เป็น null ให้กำหนดพ่อของมันเป็น null
        if(r.right != null) r.right.parent = null; // หากลูกขวาของ r ไม่เป็น null ให้กำหนดพ่อของลูกขวาเป็น null
        Node R3 = mergeWithRoot(arr[1], r.right,r); // รวมลูกขวาของ r กับสมาชิกที่สองในอาเรย์และกำหนดให้ r เป็นรากใหม่
        arr[1] = R3; // กำหนดสมาชิกที่สองในอาเรย์เป็น R3
        return arr; // คืนค่าอาเรย์
    }else if(key >= r.key){ // หาก key มากกว่าหรือเท่ากับ key ของ r
        arr = split(r.right, key); // เรียกใช้ฟังก์ชัน split กับลูกขวาของ r
        if(arr[0] != null) arr[0].parent = null; // หากสมาชิกแรกในอาเรย์ไม่เป็น null ให้กำหนดพ่อของมันเป็น null
        if(r.left != null) r.left.parent = null; // หากลูกซ้ายของ r ไม่เป็น null ให้กำหนดพ่อของลูกซ้ายเป็น null
        Node R4 = mergeWithRoot(r.left, arr[0],r); // รวมลูกซ้ายของ r กับสมาชิกแรกในอาเรย์และกำหนดให้ r เป็นรากใหม่
        arr[0] = R4; // กำหนดสมาชิกแรกในอาเรย์เป็น R4
        return arr; // คืนค่าอาเรย์
    }
    return arr; // คืนค่าอาเรย์ (กรณีอื่นๆ)
}


    // This function is complete, no need to edit
    public static int height(Node node){
        if (node == null)
            return -1;
        else
            return 1 + Math.max(height(node.left), height(node.right));
    }

    // This function is complete, no need to edit
    public void printTree() {
        if (root == null) {
            System.out.println("Empty tree!!!");
        } else {
            super.printTree(root);
        }
    }
    
    public AVLTree() {} // Dummy Constructor, no need to edit

}
