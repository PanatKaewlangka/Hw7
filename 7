public class AVLTree extends BTreePrinter { // ประกาศคลาส AVLTree ที่extendจาก BTreePrinter
    Node root; // กำหนดตัวแปร root เพื่อเก็บต้นไม้ AVL

    public AVLTree(Node root) { // คอนสตรัคเตอร์สำหรับสร้างต้นไม้ AVL โดยมี root เป็นArgument
        this.root = root; // กำหนด root ให้เป็นค่า root ที่ส่งเข้ามา
        root.parent = null; // ล้างค่าพ่อของ root (สำคัญสำหรับการแบ่งต้นไม้)
    }
    
    public void singleRotateFromLeft(Node y) { // เมธอดสำหรับการหมุนซ้ายจาก node y
        if (y == null || y.left == null) { // หาก y หรือ y.left เป็น null
            return; // ไม่ทำอะไร
        }
        Node x = y.left; // กำหนด x เป็นลูกซ้ายของ y
        Node w = y.parent; // กำหนด w เป็นพ่อของ y
        
        y.left = x.right; // ย้ายลูกขวาของ x มาเป็นลูกซ้ายของ y
        if (y.left != null) { // หากลูกซ้ายของ y ไม่เป็น null
            y.left.parent = y; // กำหนดพ่อของลูกซ้ายให้เป็น y
        }
        
        x.right = y; // ย้าย y ไปเป็นลูกขวาของ x
        y.parent = x; // กำหนดพ่อของ y เป็น x
        
        if (w != null) { // หาก w ไม่เป็น null
            if (w.left == y) { // หาก y เป็นลูกซ้ายของ w
                w.left = x;  // กำหนด x เป็นลูกซ้ายของ w
            } else {
                w.right = x;  // กำหนด x เป็นลูกขวาของ w
            }
            x.parent = w;  // อัปเดตพ่อของ x เป็น w
        } else { // หาก y เป็น root
            root = x; // กำหนด root เป็น x
            x.parent = null; // ล้างค่าพ่อของ x
        }
    }

    public void singleRotateFromRight(Node y) { // เมธอดสำหรับการหมุนขวาจาก node y
        if (y == null || y.right == null) { // หาก y หรือ y.right เป็น null
            return; // ไม่ทำอะไร
        }
        Node x = y.right; // กำหนด x เป็นลูกขวาของ y
        Node w = y.parent; // กำหนด w เป็นพ่อของ y
        
        y.right = x.left; // ย้ายลูกซ้ายของ x มาเป็นลูกขวาของ y
        if (y.right != null) { // หากลูกขวาของ y ไม่เป็น null
            y.right.parent = y; // กำหนดพ่อของลูกขวาให้เป็น y
        }
        
        x.left = y; // ย้าย y ไปเป็นลูกซ้ายของ x
        y.parent = x; // กำหนดพ่อของ y เป็น x
        
        if (w != null) { // หาก w ไม่เป็น null
            if (w.right == y) { // หาก y เป็นลูกขวาของ w
                w.right = x;  // กำหนด x เป็นลูกขวาของ w
            } else {
                w.left = x;  // กำหนด x เป็นลูกซ้ายของ w
            }
            x.parent = w;  // อัปเดตพ่อของ x เป็น w
        } else { // หาก y เป็น root
            root = x; // กำหนด root เป็น x
            x.parent = null; // ล้างค่าพ่อของ x
        }
    }
    
    public void doubleRotateFromLeft(Node y) { // การหมุนคู่จากซ้ายที่ node y
        if (y == null || y.left == null || y.left.right == null) { // หาก y หรือ y.left หรือ y.left.right เป็น null
            return; // ไม่ทำอะไร
        }
        
        Node x = y.left; // กำหนด x เป็นลูกซ้ายของ y
        Node z = x.right; // กำหนด z เป็นลูกขวาของ x
        Node w = y.parent; // กำหนด w เป็นพ่อของ y
        
        // ขั้นตอนที่ 1: หมุนขวาที่ y.left (x)
        x.right = z.left; // ย้ายลูกซ้ายของ z ไปเป็นลูกขวาของ x
        if (x.right != null) {
            x.right.parent = x; // อัปเดตพ่อของ subtree ที่ถูกย้าย
        }
        
        z.left = x; // ย้าย x ไปเป็นลูกซ้ายของ z
        x.parent = z; // กำหนดพ่อของ x เป็น z
        
        // ขั้นตอนที่ 2: หมุนซ้ายที่ y
        y.left = z.right; // ย้ายลูกขวาของ z ไปเป็นลูกซ้ายของ y
        if (y.left != null) {
            y.left.parent = y; // อัปเดตพ่อของลูกซ้าย
        }
        z.right = y; // ย้าย y ไปเป็นลูกขวาของ z
        y.parent = z; // กำหนดพ่อของ y เป็น z

        // อัปเดตค่าพ่อ
        if (w != null) { // หาก w ไม่เป็น null
            if (w.left == y) { // หาก y เป็นลูกซ้ายของ w
                w.left = z; // กำหนด z เป็นลูกซ้ายของ w
            } else {
                w.right = z; // กำหนด z เป็นลูกขวาของ w
            }
            z.parent = w; // อัปเดตพ่อของ z เป็น w
        } else { // หาก y เป็น root
            root = z; // กำหนด root เป็น z
            z.parent = null; // ล้างค่าพ่อของ z
        }
    }

    public void doubleRotateFromRight(Node y) { // การหมุนคู่จากขวาที่ node y
        if (y == null || y.right == null || y.right.left == null) { // หาก y หรือ y.right หรือ y.right.left เป็น null
            return; // ไม่ทำอะไร
        }

        Node x = y.right;  // ลูกขวาของ y
        Node z = x.left;   // ลูกซ้ายของ x (นี่จะเป็น root ใหม่ของ subtree นี้)
        Node w = y.parent; // พ่อของ y

        // ขั้นตอนที่ 1: หมุนซ้ายที่ y.right (x)
        x.left = z.right; // ย้ายลูกขวาของ z ไปเป็นลูกซ้ายของ x
        if (x.left != null) {
            x.left.parent = x; // อัปเดตพ่อของ subtree ที่ถูกย้าย
        }

        z.right = x; // ย้าย x ไปเป็นลูกขวาของ z
        x.parent = z; // กำหนดพ่อของ x เป็น z

        // ขั้นตอนที่ 2: หมุนขวาที่ y
        y.right = z.left; // ย้ายลูกซ้ายของ z ไปเป็นลูกขวาของ y
        if (y.right != null) {
            y.right.parent = y; // อัปเดตพ่อของลูกขวา
        }

        z.left = y; // ย้าย y ไปเป็นลูกซ้ายของ z
        y.parent = z; // กำหนดพ่อของ y เป็น z

        // อัปเดตค่าพ่อ
        if (w != null) { // หาก w ไม่เป็น null
            if (w.right == y) { // หาก y เป็นลูกขวาของ w
                w.right = z; // กำหนด z เป็นลูกขวาของ w
            } else {
                w.left = z; // กำหนด z เป็นลูกซ้ายของ w
            }
            z.parent = w; // อัปเดตพ่อของ z เป็น w
        } else { // หาก y เป็น root
            root = z; // กำหนด root เป็น z
            z.parent = null; // ล้างค่าพ่อของ z
        }
    }
    
    public static void rebalance(AVLTree tree, Node node) { // ปรับสมดุลของต้นไม้ AVL ที่ node
        if (node == null) return; // หาก node เป็น null ให้กลับ
        int balanceFactor = height(node.left) - height(node.right); // คำนวณ balanceFactor
        if (Math.abs(balanceFactor) > 1){ // ตรวจสอบว่าไม่สมดุลไหม?
            if (balanceFactor > 0){ // หากหนักไปทางซ้าย
                balanceFactor = height(node.left.left) - height(node.left.right); // คำนวณ balanceFactor ใหม่
                if (balanceFactor > 0){ // กรณีภายนอก
                    System.out.println("Perform SingleRotationFromLeft(Node " + node.key + ")"); // แสดงข้อความ
                    tree.singleRotateFromLeft(node); // เรียกใช้การหมุนซ้าย
                }else{ // กรณีภายใน
                    System.out.println("Perform DoubleRotationFromLeft(Node " + node.key + ")"); // แสดงข้อความ
                    tree.doubleRotateFromLeft(node); // เรียกใช้การหมุนคู่จากซ้าย
                }
            }else{ // หากหนักไปทางขวา
                balanceFactor = height(node.right.right) - height(node.right.left); // คำนวณ balanceFactor ใหม่
                if (balanceFactor > 0){ // กรณีภายนอก
                    System.out.println("Perform SingleRotationFromRight(Node " + node.key + ")"); // แสดงข้อความ
                    tree.singleRotateFromRight(node); // เรียกใช้การหมุนขวา
                }else{ // กรณีภายใน
                    System.out.println("Perform DoubleRotationFromRight(Node " + node.key + ")"); // แสดงข้อความ
                    tree.doubleRotateFromRight(node); // เรียกใช้การหมุนคู่จากขวา
                }
            }
        }
    }
    
    public static Node findKey(Node node, int search_key) { // ค้นหาคีย์ในต้นไม้
        if (node == null) { // หาก node เป็น null
            return null; // ให้กลับ null
        }
        if (node.key == search_key) { // หากคีย์ของ node เท่ากับ search_key
            return node; // คืนค่า node
        }
        if (search_key < node.key) { // หาก search_key น้อยกว่า key ของ node
            return findKey(node.left, search_key); // ค้นหาในลูกซ้าย
        } else {
            return findKey(node.right, search_key); // ค้นหาในลูกขวา
        }
    }

    public static Node findMin(Node node) { // ค้นหาค่าต่ำสุดใน subtree
        if (node.left == null) { // หากลูกซ้ายเป็น null
            return node; // คืนค่า node
        } else {
            return findMin(node.left); // ค้นหาในลูกซ้าย
        }
    }

    public static Node findMax(Node node) { // ค้นหาค่าสูงสุดใน subtree
        if (node.right == null) { // หากลูกขวาเป็น null
            return node; // คืนค่า node
        } else {
            return findMax(node.right); // ค้นหาในลูกขวา
        }
    }

    public void insertKey(int key) { // สำหรับเพิ่มคีย์ในต้นไม้
        if (root == null) { // หาก root เป็น null
            root = new Node(key); // สร้าง node ใหม่และกำหนดให้เป็น root
        } else {
            insertKey(this, root, key); // เรียกใช้เมธอดเพิ่มคีย์
        }
    }

    public static void insertKey(AVLTree tree, Node node, int key) { // เพิ่มคีย์ในต้นไม้
        if (key == node.key) { // หากคีย์ซ้ำ
            System.out.println("Duplicated key:" + key); // แสดงข้อความว่าคีย์ซ้ำ
            return; // ไม่ทำอะไร
        } else if (key < node.key) { // หากคีย์น้อยกว่าคีย์ของ node
            if (node.left == null) { // หากลูกซ้ายเป็น null
                node.left = new Node(key); // สร้าง node ใหม่และกำหนดให้เป็นลูกซ้าย
                node.left.parent = node; // กำหนดพ่อของลูกซ้ายเป็น node
                rebalance(tree, node); // ปรับสมดุลต้นไม้
            } else {
                insertKey(tree, node.left, key); // เรียกใช้เมธอดเพิ่มคีย์ในลูกซ้าย
                rebalance(tree, node); // ปรับสมดุลต้นไม้
            }
        } else {  // หากคีย์มากกว่าคีย์ของ node
            if (node.right == null) { // หากลูกขวาเป็น null
                node.right = new Node(key); // สร้าง node ใหม่และกำหนดให้เป็นลูกขวา
                node.right.parent = node; // กำหนดพ่อของลูกขวาเป็น node
                rebalance(tree, node); // ปรับสมดุลต้นไม้
            } else {
                insertKey(tree, node.right, key); // เรียกใช้เมธอดเพิ่มคีย์ในลูกขวา
                rebalance(tree, node); // ปรับสมดุลต้นไม้
            }
        }
    }
    
    public void deleteKey(int key) { // สำหรับลบคีย์จากต้นไม้
        if (root == null) { // หาก root เป็น null
            System.out.println("Empty Tree!!!"); // แสดงข้อความว่าต้นไม้ว่างเปล่า
        } else {
            Node delete = findKey(root, key); // ค้นหา node ที่ต้องการลบ
            if (delete == null) { // หากไม่พบ node ที่ต้องการลบ
                return; // ไม่ทำอะไร
            } else {
                if (delete != root) { // หาก node ที่ต้องการลบไม่ใช่ root
                    deleteKey(this, delete); // เรียกใช้เมธอดลบคีย์
                } else {
                    if (delete.left == null && delete.right == null) { // หาก node ไม่มีลูก
                        delete = null; // ลบ node
                    } 
                    else if (delete.left == null) { // หากมีลูกขวาเพียงอย่างเดียว
                        delete = delete.right; // กำหนดให้ delete เป็นลูกขวา
                    } 
                    else if (delete.right == null) { // หากมีลูกซ้ายเพียงอย่างเดียว
                        delete = delete.left; // กำหนดให้ delete เป็นลูกซ้าย
                    } 
                    else {
                        Node deleteLastCase = findMin(delete.right); // หาค่าต่ำสุดในลูกขวา
                        delete.key = deleteLastCase.key; // เปลี่ยนคีย์ของ delete เป็นคีย์ที่ต่ำสุด
                        deleteKey(this, deleteLastCase); // ลบ node ที่ต่ำสุด
                    }
                    root = delete; // กำหนด root ใหม่
                }
            }
        }
    }
    
    public static void deleteKey(AVLTree tree, Node node) { // ลบคีย์จากต้นไม้
        // Pls copy the code from the previous homework
        // Add code segments to enable the rebalancing feature
        if (node.left == null && node.right == null) { // หาก node ไม่มีลูก
            if (node.key < node.parent.key) { // หาก node เป็นลูกซ้าย
                node.parent.left = null; // ลบลูกซ้าย
            } else {
                node.parent.right = null; // ลบลูกขวา
            }
        } 
        else if (node.left == null) { // หากมีลูกขวาเพียงอย่างเดียว
            if (node.key < node.parent.key) { // หาก node เป็นลูกซ้าย
                node.parent.left = node.right; // เปลี่ยนลูกซ้ายให้เป็นลูกขวาของ node
            } else {
                node.parent.right = node.right; // เปลี่ยนลูกขวาให้เป็นลูกขวาของ node
            }
            node.right.parent = node.parent; // อัปเดตพ่อของลูกขวา
        } 
        else if (node.right == null) { // หากมีลูกซ้ายเพียงอย่างเดียว
            if (node.key < node.parent.key) { // หาก node เป็นลูกซ้าย
                node.parent.left = node.left; // เปลี่ยนลูกซ้ายให้เป็นลูกซ้ายของ node
            } else {
                node.parent.right = node.left; // เปลี่ยนลูกขวาให้เป็นลูกซ้ายของ node
            }
            node.left.parent = node.parent; // อัปเดตพ่อของลูกซ้าย
        } 
        // กรณีมีลูกทั้งสองข้าง
        else {
            Node delete = findMin(node.right); // หาค่าต่ำสุดในลูกขวา
            node.key = delete.key; // เปลี่ยนคีย์ของ node ที่ต้องการลบ
            deleteKey(tree, delete); // ลบ node ที่ต่ำสุด
        }  
        Node current = node.parent; // เริ่มจากพ่อของ node ที่ถูกลบ
        while (current != null) { // ทำงานขณะ current ไม่เป็น null
            rebalance(tree, current); // ปรับสมดุล node ปัจจุบัน
            current = current.parent; // ย้ายไปยังพ่อ
        }
    }
    
    public static boolean isMergeable(Node r1, Node r2) { // ตรวจสอบว่าสามารถรวม node r1 และ r2 ได้หรือไม่
        if(r1 == null && r2 != null) return true; // หาก r1 เป็น null แต่ r2 ไม่เป็น null
        if(r1 != null && r2 == null) return true; // หาก r2 เป็น null แต่ r1 ไม่เป็น null
        if (findMax(r1).key < findMin(r2).key){ // หากค่ามากสุดของ r1 น้อยกว่าค่าต่ำสุดของ r2
            return true; // สามารถรวมได้
        }else return false; // ไม่สามารถรวมได้
    }

    public static Node mergeWithRoot(Node r1, Node r2, Node t) { // รวมต้นไม้ r1 และ r2 โดยใช้ t เป็นรากใหม่
        if(r1 == null && r2 == null) return t; // หากทั้งสองต้นไม้เป็น null
        if (isMergeable(r1, r2)) { // ตรวจสอบว่ารวมได้หรือไม่
            if (Math.abs(height(r1) - height(r2)) <= 1) { // หากความสูงของต้นไม้แตกต่างกันไม่เกิน 1
                t.left = r1; // กำหนด r1 เป็นลูกซ้ายของ t
                t.right = r2; // กำหนด r2 เป็นลูกขวาของ t
                return t; // คืนค่า t
            } else if (height(r1) > height(r2)) { // หาก r1 สูงกว่า r2
                Node r = mergeWithRoot(r1.right, r2, t); // รวมลูกขวาของ r1 กับ r2
                r1.right = r; // กำหนดลูกขวาของ r1 เป็นผลลัพธ์
                r.parent = r1; // กำหนดพ่อของ r เป็น r1
                AVLTree tree = new AVLTree(r1); // สร้าง AVLTree ใหม่ด้วย r1
                rebalance(tree, r1); // ปรับสมดุลต้นไม้
                return tree.root; // คืนค่า root ของต้นไม้
            } else { // หาก r2 สูงกว่า r1
                Node r = mergeWithRoot(r1, r2.left, t); // รวม r1 กับลูกซ้ายของ r2
                r2.left = r; // กำหนดลูกซ้ายของ r2 เป็นผลลัพธ์
                r.parent = r2; // กำหนดพ่อของ r เป็น r2
                AVLTree tree = new AVLTree(r2); // สร้าง AVLTree ใหม่ด้วย r2
                rebalance(tree, r2); // ปรับสมดุลต้นไม้
                return tree.root; // คืนค่า root ของต้นไม้
            }
        } else { // หากไม่สามารถรวมได้
            System.out.println("All nodes in T1 must be smaller than all nodes from T2"); // แสดงข้อความ
            return null; // คืนค่า null
        }
    }

    // แก้ไขฟังก์ชันนี้
    public Node[] split(int key) { // แบ่งต้นไม้โดยใช้ key
        return split(this.root, key); // เรียกใช้เมธอด static split
    }
    
    // แก้ไขฟังก์ชันนี้
    public static Node[] split(Node r, int key) { // static แบ่งต้นไม้
        Node[] arr = new Node[2]; // สร้างอาเรย์เพื่อเก็บผลลัพธ์
        // ทำอะไรสักอย่าง
        if (r == null) { // หาก node เป็น null
            arr[0] = null; // กำหนดค่าในอาเรย์เป็น null
            arr[1] = null; // กำหนดค่าในอาเรย์เป็น null
            return arr; // คืนค่าอาเรย์
        } else if(key < r.key) { // หาก key น้อยกว่าคีย์ของ r
            arr = split(r.left, key); // แบ่ง subtree ซ้าย
            if(arr[1] != null) arr[1].parent = null; // อัปเดตพ่อของ subtree ที่ถูกแบ่ง
            if(r.right != null) r.right.parent = null; // อัปเดตพ่อของลูกขวา
            Node R3 = mergeWithRoot(arr[1], r.right,r); // รวม subtree ที่ถูกแบ่งกับลูกขวาของ r
            arr[1] = R3; // กำหนดผลลัพธ์ในอาเรย์
            return arr; // คืนค่าอาเรย์
        } else if(key >= r.key) { // หาก key มากกว่าหรือเท่ากับคีย์ของ r
            arr = split(r.right, key); // แบ่ง subtree ขวา
            if(arr[0] != null) arr[0].parent = null; // อัปเดตพ่อของ subtree ที่ถูกแบ่ง
            if(r.left != null) r.left.parent = null; // อัปเดตพ่อของลูกซ้าย
            Node R4 = mergeWithRoot(r.left, arr[0],r); // รวมลูกซ้ายของ r กับ subtree ที่ถูกแบ่ง
            arr[0] = R4; // กำหนดผลลัพธ์ในอาเรย์
            return arr; // คืนค่าอาเรย์
        }
        return arr; // คืนค่าอาเรย์
    }

    // This function is complete, no need to edit
    public static int height(Node node) { // คำนวณความสูงของต้นไม้
        if (node == null) // หาก node เป็น null
            return -1; // คืนค่า -1
        else
            return 1 + Math.max(height(node.left), height(node.right)); // คืนค่าความสูง
    }

    // This function is complete, no need to edit
    public void printTree() { // พิมพ์ต้นไม้
        if (root == null) { // หาก root เป็น null
            System.out.println("Empty tree!!!"); // แสดงข้อความว่าต้นไม้ว่างเปล่า
        } else {
            super.printTree(root); // เรียกใช้เมธอดพิมพ์ของ BTreePrinter
        }
    }
    
    public AVLTree() {} // Dummy Constructor, no need to edit

}
